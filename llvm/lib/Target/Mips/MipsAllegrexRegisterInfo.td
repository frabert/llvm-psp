//===- MipsAllegrexRegisterInfo.td - Allegrex Register File -*- tablegen -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file contains a description of the Allegrex vector unit registers.
// It has been partially automatically generated by a custom script due to its
// sheer size, and describes the four 4x4 matrices in terms of its row and
// column components, in turn composed of their individual scalar values.
//
//===----------------------------------------------------------------------===//

foreach M = 0-7 in {
  foreach C = 0-3 in {
    foreach R = 0-3 in {
      def "S"#M#""#C#""#R : VFPR<!add(C, !shl(M, 2), !shl(R, 5)), "S"#M#""#C#""#R>;
    }
  }
}

let Namespace = "Mips" in {
let SubRegIndices = [ sub_vfpus_1, sub_vfpus_2 ] in {
  def C000_P : VFPR<0, "C000"> {
    let SubRegs = [ S000, S001 ];
  }
  def C010_P : VFPR<1, "C010"> {
    let SubRegs = [ S010, S011 ];
  }
  def C020_P : VFPR<2, "C020"> {
    let SubRegs = [ S020, S021 ];
  }
  def C030_P : VFPR<3, "C030"> {
    let SubRegs = [ S030, S031 ];
  }
  def C100_P : VFPR<4, "C100"> {
    let SubRegs = [ S100, S101 ];
  }
  def C110_P : VFPR<5, "C110"> {
    let SubRegs = [ S110, S111 ];
  }
  def C120_P : VFPR<6, "C120"> {
    let SubRegs = [ S120, S121 ];
  }
  def C130_P : VFPR<7, "C130"> {
    let SubRegs = [ S130, S131 ];
  }
  def C200_P : VFPR<8, "C200"> {
    let SubRegs = [ S200, S201 ];
  }
  def C210_P : VFPR<9, "C210"> {
    let SubRegs = [ S210, S211 ];
  }
  def C220_P : VFPR<10, "C220"> {
    let SubRegs = [ S220, S221 ];
  }
  def C230_P : VFPR<11, "C230"> {
    let SubRegs = [ S230, S231 ];
  }
  def C300_P : VFPR<12, "C300"> {
    let SubRegs = [ S300, S301 ];
  }
  def C310_P : VFPR<13, "C310"> {
    let SubRegs = [ S310, S311 ];
  }
  def C320_P : VFPR<14, "C320"> {
    let SubRegs = [ S320, S321 ];
  }
  def C330_P : VFPR<15, "C330"> {
    let SubRegs = [ S330, S331 ];
  }
  def C400_P : VFPR<16, "C400"> {
    let SubRegs = [ S400, S401 ];
  }
  def C410_P : VFPR<17, "C410"> {
    let SubRegs = [ S410, S411 ];
  }
  def C420_P : VFPR<18, "C420"> {
    let SubRegs = [ S420, S421 ];
  }
  def C430_P : VFPR<19, "C430"> {
    let SubRegs = [ S430, S431 ];
  }
  def C500_P : VFPR<20, "C500"> {
    let SubRegs = [ S500, S501 ];
  }
  def C510_P : VFPR<21, "C510"> {
    let SubRegs = [ S510, S511 ];
  }
  def C520_P : VFPR<22, "C520"> {
    let SubRegs = [ S520, S521 ];
  }
  def C530_P : VFPR<23, "C530"> {
    let SubRegs = [ S530, S531 ];
  }
  def C600_P : VFPR<24, "C600"> {
    let SubRegs = [ S600, S601 ];
  }
  def C610_P : VFPR<25, "C610"> {
    let SubRegs = [ S610, S611 ];
  }
  def C620_P : VFPR<26, "C620"> {
    let SubRegs = [ S620, S621 ];
  }
  def C630_P : VFPR<27, "C630"> {
    let SubRegs = [ S630, S631 ];
  }
  def C700_P : VFPR<28, "C700"> {
    let SubRegs = [ S700, S701 ];
  }
  def C710_P : VFPR<29, "C710"> {
    let SubRegs = [ S710, S711 ];
  }
  def C720_P : VFPR<30, "C720"> {
    let SubRegs = [ S720, S721 ];
  }
  def C730_P : VFPR<31, "C730"> {
    let SubRegs = [ S730, S731 ];
  }
  def R000_P : VFPR<32, "R000"> {
    let SubRegs = [ S000, S010 ];
  }
  def R001_P : VFPR<33, "R001"> {
    let SubRegs = [ S001, S011 ];
  }
  def R002_P : VFPR<34, "R002"> {
    let SubRegs = [ S002, S012 ];
  }
  def R003_P : VFPR<35, "R003"> {
    let SubRegs = [ S003, S013 ];
  }
  def R100_P : VFPR<36, "R100"> {
    let SubRegs = [ S100, S110 ];
  }
  def R101_P : VFPR<37, "R101"> {
    let SubRegs = [ S101, S111 ];
  }
  def R102_P : VFPR<38, "R102"> {
    let SubRegs = [ S102, S112 ];
  }
  def R103_P : VFPR<39, "R103"> {
    let SubRegs = [ S103, S113 ];
  }
  def R200_P : VFPR<40, "R200"> {
    let SubRegs = [ S200, S210 ];
  }
  def R201_P : VFPR<41, "R201"> {
    let SubRegs = [ S201, S211 ];
  }
  def R202_P : VFPR<42, "R202"> {
    let SubRegs = [ S202, S212 ];
  }
  def R203_P : VFPR<43, "R203"> {
    let SubRegs = [ S203, S213 ];
  }
  def R300_P : VFPR<44, "R300"> {
    let SubRegs = [ S300, S310 ];
  }
  def R301_P : VFPR<45, "R301"> {
    let SubRegs = [ S301, S311 ];
  }
  def R302_P : VFPR<46, "R302"> {
    let SubRegs = [ S302, S312 ];
  }
  def R303_P : VFPR<47, "R303"> {
    let SubRegs = [ S303, S313 ];
  }
  def R400_P : VFPR<48, "R400"> {
    let SubRegs = [ S400, S410 ];
  }
  def R401_P : VFPR<49, "R401"> {
    let SubRegs = [ S401, S411 ];
  }
  def R402_P : VFPR<50, "R402"> {
    let SubRegs = [ S402, S412 ];
  }
  def R403_P : VFPR<51, "R403"> {
    let SubRegs = [ S403, S413 ];
  }
  def R500_P : VFPR<52, "R500"> {
    let SubRegs = [ S500, S510 ];
  }
  def R501_P : VFPR<53, "R501"> {
    let SubRegs = [ S501, S511 ];
  }
  def R502_P : VFPR<54, "R502"> {
    let SubRegs = [ S502, S512 ];
  }
  def R503_P : VFPR<55, "R503"> {
    let SubRegs = [ S503, S513 ];
  }
  def R600_P : VFPR<56, "R600"> {
    let SubRegs = [ S600, S610 ];
  }
  def R601_P : VFPR<57, "R601"> {
    let SubRegs = [ S601, S611 ];
  }
  def R602_P : VFPR<58, "R602"> {
    let SubRegs = [ S602, S612 ];
  }
  def R603_P : VFPR<59, "R603"> {
    let SubRegs = [ S603, S613 ];
  }
  def R700_P : VFPR<60, "R700"> {
    let SubRegs = [ S700, S710 ];
  }
  def R701_P : VFPR<61, "R701"> {
    let SubRegs = [ S701, S711 ];
  }
  def R702_P : VFPR<62, "R702"> {
    let SubRegs = [ S702, S712 ];
  }
  def R703_P : VFPR<63, "R703"> {
    let SubRegs = [ S703, S713 ];
  }
  def C002_P : VFPR<64, "C002"> {
    let SubRegs = [ S002, S003 ];
  }
  def C012_P : VFPR<65, "C012"> {
    let SubRegs = [ S012, S013 ];
  }
  def C022_P : VFPR<66, "C022"> {
    let SubRegs = [ S022, S023 ];
  }
  def C032_P : VFPR<67, "C032"> {
    let SubRegs = [ S032, S033 ];
  }
  def C102_P : VFPR<68, "C102"> {
    let SubRegs = [ S102, S103 ];
  }
  def C112_P : VFPR<69, "C112"> {
    let SubRegs = [ S112, S113 ];
  }
  def C122_P : VFPR<70, "C122"> {
    let SubRegs = [ S122, S123 ];
  }
  def C132_P : VFPR<71, "C132"> {
    let SubRegs = [ S132, S133 ];
  }
  def C202_P : VFPR<72, "C202"> {
    let SubRegs = [ S202, S203 ];
  }
  def C212_P : VFPR<73, "C212"> {
    let SubRegs = [ S212, S213 ];
  }
  def C222_P : VFPR<74, "C222"> {
    let SubRegs = [ S222, S223 ];
  }
  def C232_P : VFPR<75, "C232"> {
    let SubRegs = [ S232, S233 ];
  }
  def C302_P : VFPR<76, "C302"> {
    let SubRegs = [ S302, S303 ];
  }
  def C312_P : VFPR<77, "C312"> {
    let SubRegs = [ S312, S313 ];
  }
  def C322_P : VFPR<78, "C322"> {
    let SubRegs = [ S322, S323 ];
  }
  def C332_P : VFPR<79, "C332"> {
    let SubRegs = [ S332, S333 ];
  }
  def C402_P : VFPR<80, "C402"> {
    let SubRegs = [ S402, S403 ];
  }
  def C412_P : VFPR<81, "C412"> {
    let SubRegs = [ S412, S413 ];
  }
  def C422_P : VFPR<82, "C422"> {
    let SubRegs = [ S422, S423 ];
  }
  def C432_P : VFPR<83, "C432"> {
    let SubRegs = [ S432, S433 ];
  }
  def C502_P : VFPR<84, "C502"> {
    let SubRegs = [ S502, S503 ];
  }
  def C512_P : VFPR<85, "C512"> {
    let SubRegs = [ S512, S513 ];
  }
  def C522_P : VFPR<86, "C522"> {
    let SubRegs = [ S522, S523 ];
  }
  def C532_P : VFPR<87, "C532"> {
    let SubRegs = [ S532, S533 ];
  }
  def C602_P : VFPR<88, "C602"> {
    let SubRegs = [ S602, S603 ];
  }
  def C612_P : VFPR<89, "C612"> {
    let SubRegs = [ S612, S613 ];
  }
  def C622_P : VFPR<90, "C622"> {
    let SubRegs = [ S622, S623 ];
  }
  def C632_P : VFPR<91, "C632"> {
    let SubRegs = [ S632, S633 ];
  }
  def C702_P : VFPR<92, "C702"> {
    let SubRegs = [ S702, S703 ];
  }
  def C712_P : VFPR<93, "C712"> {
    let SubRegs = [ S712, S713 ];
  }
  def C722_P : VFPR<94, "C722"> {
    let SubRegs = [ S722, S723 ];
  }
  def C732_P : VFPR<95, "C732"> {
    let SubRegs = [ S732, S733 ];
  }
  def R020_P : VFPR<96, "R020"> {
    let SubRegs = [ S020, S030 ];
  }
  def R021_P : VFPR<97, "R021"> {
    let SubRegs = [ S021, S031 ];
  }
  def R022_P : VFPR<98, "R022"> {
    let SubRegs = [ S022, S032 ];
  }
  def R023_P : VFPR<99, "R023"> {
    let SubRegs = [ S023, S033 ];
  }
  def R120_P : VFPR<100, "R120"> {
    let SubRegs = [ S120, S130 ];
  }
  def R121_P : VFPR<101, "R121"> {
    let SubRegs = [ S121, S131 ];
  }
  def R122_P : VFPR<102, "R122"> {
    let SubRegs = [ S122, S132 ];
  }
  def R123_P : VFPR<103, "R123"> {
    let SubRegs = [ S123, S133 ];
  }
  def R220_P : VFPR<104, "R220"> {
    let SubRegs = [ S220, S230 ];
  }
  def R221_P : VFPR<105, "R221"> {
    let SubRegs = [ S221, S231 ];
  }
  def R222_P : VFPR<106, "R222"> {
    let SubRegs = [ S222, S232 ];
  }
  def R223_P : VFPR<107, "R223"> {
    let SubRegs = [ S223, S233 ];
  }
  def R320_P : VFPR<108, "R320"> {
    let SubRegs = [ S320, S330 ];
  }
  def R321_P : VFPR<109, "R321"> {
    let SubRegs = [ S321, S331 ];
  }
  def R322_P : VFPR<110, "R322"> {
    let SubRegs = [ S322, S332 ];
  }
  def R323_P : VFPR<111, "R323"> {
    let SubRegs = [ S323, S333 ];
  }
  def R420_P : VFPR<112, "R420"> {
    let SubRegs = [ S420, S430 ];
  }
  def R421_P : VFPR<113, "R421"> {
    let SubRegs = [ S421, S431 ];
  }
  def R422_P : VFPR<114, "R422"> {
    let SubRegs = [ S422, S432 ];
  }
  def R423_P : VFPR<115, "R423"> {
    let SubRegs = [ S423, S433 ];
  }
  def R520_P : VFPR<116, "R520"> {
    let SubRegs = [ S520, S530 ];
  }
  def R521_P : VFPR<117, "R521"> {
    let SubRegs = [ S521, S531 ];
  }
  def R522_P : VFPR<118, "R522"> {
    let SubRegs = [ S522, S532 ];
  }
  def R523_P : VFPR<119, "R523"> {
    let SubRegs = [ S523, S533 ];
  }
  def R620_P : VFPR<120, "R620"> {
    let SubRegs = [ S620, S630 ];
  }
  def R621_P : VFPR<121, "R621"> {
    let SubRegs = [ S621, S631 ];
  }
  def R622_P : VFPR<122, "R622"> {
    let SubRegs = [ S622, S632 ];
  }
  def R623_P : VFPR<123, "R623"> {
    let SubRegs = [ S623, S633 ];
  }
  def R720_P : VFPR<124, "R720"> {
    let SubRegs = [ S720, S730 ];
  }
  def R721_P : VFPR<125, "R721"> {
    let SubRegs = [ S721, S731 ];
  }
  def R722_P : VFPR<126, "R722"> {
    let SubRegs = [ S722, S732 ];
  }
  def R723_P : VFPR<127, "R723"> {
    let SubRegs = [ S723, S733 ];
  }
}

let SubRegIndices = [ sub_vfpus_1, sub_vfpus_2, sub_vfpus_3 ] in {
  def C000_T : VFPR<0, "C000"> {
    let SubRegs = [ S000, S001, S002 ];
  }
  def C010_T : VFPR<1, "C010"> {
    let SubRegs = [ S010, S011, S012 ];
  }
  def C020_T : VFPR<2, "C020"> {
    let SubRegs = [ S020, S021, S022 ];
  }
  def C030_T : VFPR<3, "C030"> {
    let SubRegs = [ S030, S031, S032 ];
  }
  def C100_T : VFPR<4, "C100"> {
    let SubRegs = [ S100, S101, S102 ];
  }
  def C110_T : VFPR<5, "C110"> {
    let SubRegs = [ S110, S111, S112 ];
  }
  def C120_T : VFPR<6, "C120"> {
    let SubRegs = [ S120, S121, S122 ];
  }
  def C130_T : VFPR<7, "C130"> {
    let SubRegs = [ S130, S131, S132 ];
  }
  def C200_T : VFPR<8, "C200"> {
    let SubRegs = [ S200, S201, S202 ];
  }
  def C210_T : VFPR<9, "C210"> {
    let SubRegs = [ S210, S211, S212 ];
  }
  def C220_T : VFPR<10, "C220"> {
    let SubRegs = [ S220, S221, S222 ];
  }
  def C230_T : VFPR<11, "C230"> {
    let SubRegs = [ S230, S231, S232 ];
  }
  def C300_T : VFPR<12, "C300"> {
    let SubRegs = [ S300, S301, S302 ];
  }
  def C310_T : VFPR<13, "C310"> {
    let SubRegs = [ S310, S311, S312 ];
  }
  def C320_T : VFPR<14, "C320"> {
    let SubRegs = [ S320, S321, S322 ];
  }
  def C330_T : VFPR<15, "C330"> {
    let SubRegs = [ S330, S331, S332 ];
  }
  def C400_T : VFPR<16, "C400"> {
    let SubRegs = [ S400, S401, S402 ];
  }
  def C410_T : VFPR<17, "C410"> {
    let SubRegs = [ S410, S411, S412 ];
  }
  def C420_T : VFPR<18, "C420"> {
    let SubRegs = [ S420, S421, S422 ];
  }
  def C430_T : VFPR<19, "C430"> {
    let SubRegs = [ S430, S431, S432 ];
  }
  def C500_T : VFPR<20, "C500"> {
    let SubRegs = [ S500, S501, S502 ];
  }
  def C510_T : VFPR<21, "C510"> {
    let SubRegs = [ S510, S511, S512 ];
  }
  def C520_T : VFPR<22, "C520"> {
    let SubRegs = [ S520, S521, S522 ];
  }
  def C530_T : VFPR<23, "C530"> {
    let SubRegs = [ S530, S531, S532 ];
  }
  def C600_T : VFPR<24, "C600"> {
    let SubRegs = [ S600, S601, S602 ];
  }
  def C610_T : VFPR<25, "C610"> {
    let SubRegs = [ S610, S611, S612 ];
  }
  def C620_T : VFPR<26, "C620"> {
    let SubRegs = [ S620, S621, S622 ];
  }
  def C630_T : VFPR<27, "C630"> {
    let SubRegs = [ S630, S631, S632 ];
  }
  def C700_T : VFPR<28, "C700"> {
    let SubRegs = [ S700, S701, S702 ];
  }
  def C710_T : VFPR<29, "C710"> {
    let SubRegs = [ S710, S711, S712 ];
  }
  def C720_T : VFPR<30, "C720"> {
    let SubRegs = [ S720, S721, S722 ];
  }
  def C730_T : VFPR<31, "C730"> {
    let SubRegs = [ S730, S731, S732 ];
  }
  def R000_T : VFPR<32, "R000"> {
    let SubRegs = [ S000, S010, S020 ];
  }
  def R001_T : VFPR<33, "R001"> {
    let SubRegs = [ S001, S011, S021 ];
  }
  def R002_T : VFPR<34, "R002"> {
    let SubRegs = [ S002, S012, S022 ];
  }
  def R003_T : VFPR<35, "R003"> {
    let SubRegs = [ S003, S013, S023 ];
  }
  def R100_T : VFPR<36, "R100"> {
    let SubRegs = [ S100, S110, S120 ];
  }
  def R101_T : VFPR<37, "R101"> {
    let SubRegs = [ S101, S111, S121 ];
  }
  def R102_T : VFPR<38, "R102"> {
    let SubRegs = [ S102, S112, S122 ];
  }
  def R103_T : VFPR<39, "R103"> {
    let SubRegs = [ S103, S113, S123 ];
  }
  def R200_T : VFPR<40, "R200"> {
    let SubRegs = [ S200, S210, S220 ];
  }
  def R201_T : VFPR<41, "R201"> {
    let SubRegs = [ S201, S211, S221 ];
  }
  def R202_T : VFPR<42, "R202"> {
    let SubRegs = [ S202, S212, S222 ];
  }
  def R203_T : VFPR<43, "R203"> {
    let SubRegs = [ S203, S213, S223 ];
  }
  def R300_T : VFPR<44, "R300"> {
    let SubRegs = [ S300, S310, S320 ];
  }
  def R301_T : VFPR<45, "R301"> {
    let SubRegs = [ S301, S311, S321 ];
  }
  def R302_T : VFPR<46, "R302"> {
    let SubRegs = [ S302, S312, S322 ];
  }
  def R303_T : VFPR<47, "R303"> {
    let SubRegs = [ S303, S313, S323 ];
  }
  def R400_T : VFPR<48, "R400"> {
    let SubRegs = [ S400, S410, S420 ];
  }
  def R401_T : VFPR<49, "R401"> {
    let SubRegs = [ S401, S411, S421 ];
  }
  def R402_T : VFPR<50, "R402"> {
    let SubRegs = [ S402, S412, S422 ];
  }
  def R403_T : VFPR<51, "R403"> {
    let SubRegs = [ S403, S413, S423 ];
  }
  def R500_T : VFPR<52, "R500"> {
    let SubRegs = [ S500, S510, S520 ];
  }
  def R501_T : VFPR<53, "R501"> {
    let SubRegs = [ S501, S511, S521 ];
  }
  def R502_T : VFPR<54, "R502"> {
    let SubRegs = [ S502, S512, S522 ];
  }
  def R503_T : VFPR<55, "R503"> {
    let SubRegs = [ S503, S513, S523 ];
  }
  def R600_T : VFPR<56, "R600"> {
    let SubRegs = [ S600, S610, S620 ];
  }
  def R601_T : VFPR<57, "R601"> {
    let SubRegs = [ S601, S611, S621 ];
  }
  def R602_T : VFPR<58, "R602"> {
    let SubRegs = [ S602, S612, S622 ];
  }
  def R603_T : VFPR<59, "R603"> {
    let SubRegs = [ S603, S613, S623 ];
  }
  def R700_T : VFPR<60, "R700"> {
    let SubRegs = [ S700, S710, S720 ];
  }
  def R701_T : VFPR<61, "R701"> {
    let SubRegs = [ S701, S711, S721 ];
  }
  def R702_T : VFPR<62, "R702"> {
    let SubRegs = [ S702, S712, S722 ];
  }
  def R703_T : VFPR<63, "R703"> {
    let SubRegs = [ S703, S713, S723 ];
  }
  def C001_T : VFPR<64, "C001"> {
    let SubRegs = [ S001, S002, S003 ];
  }
  def C011_T : VFPR<65, "C011"> {
    let SubRegs = [ S011, S012, S013 ];
  }
  def C021_T : VFPR<66, "C021"> {
    let SubRegs = [ S021, S022, S023 ];
  }
  def C031_T : VFPR<67, "C031"> {
    let SubRegs = [ S031, S032, S033 ];
  }
  def C101_T : VFPR<68, "C101"> {
    let SubRegs = [ S101, S102, S103 ];
  }
  def C111_T : VFPR<69, "C111"> {
    let SubRegs = [ S111, S112, S113 ];
  }
  def C121_T : VFPR<70, "C121"> {
    let SubRegs = [ S121, S122, S123 ];
  }
  def C131_T : VFPR<71, "C131"> {
    let SubRegs = [ S131, S132, S133 ];
  }
  def C201_T : VFPR<72, "C201"> {
    let SubRegs = [ S201, S202, S203 ];
  }
  def C211_T : VFPR<73, "C211"> {
    let SubRegs = [ S211, S212, S213 ];
  }
  def C221_T : VFPR<74, "C221"> {
    let SubRegs = [ S221, S222, S223 ];
  }
  def C231_T : VFPR<75, "C231"> {
    let SubRegs = [ S231, S232, S233 ];
  }
  def C301_T : VFPR<76, "C301"> {
    let SubRegs = [ S301, S302, S303 ];
  }
  def C311_T : VFPR<77, "C311"> {
    let SubRegs = [ S311, S312, S313 ];
  }
  def C321_T : VFPR<78, "C321"> {
    let SubRegs = [ S321, S322, S323 ];
  }
  def C331_T : VFPR<79, "C331"> {
    let SubRegs = [ S331, S332, S333 ];
  }
  def C401_T : VFPR<80, "C401"> {
    let SubRegs = [ S401, S402, S403 ];
  }
  def C411_T : VFPR<81, "C411"> {
    let SubRegs = [ S411, S412, S413 ];
  }
  def C421_T : VFPR<82, "C421"> {
    let SubRegs = [ S421, S422, S423 ];
  }
  def C431_T : VFPR<83, "C431"> {
    let SubRegs = [ S431, S432, S433 ];
  }
  def C501_T : VFPR<84, "C501"> {
    let SubRegs = [ S501, S502, S503 ];
  }
  def C511_T : VFPR<85, "C511"> {
    let SubRegs = [ S511, S512, S513 ];
  }
  def C521_T : VFPR<86, "C521"> {
    let SubRegs = [ S521, S522, S523 ];
  }
  def C531_T : VFPR<87, "C531"> {
    let SubRegs = [ S531, S532, S533 ];
  }
  def C601_T : VFPR<88, "C601"> {
    let SubRegs = [ S601, S602, S603 ];
  }
  def C611_T : VFPR<89, "C611"> {
    let SubRegs = [ S611, S612, S613 ];
  }
  def C621_T : VFPR<90, "C621"> {
    let SubRegs = [ S621, S622, S623 ];
  }
  def C631_T : VFPR<91, "C631"> {
    let SubRegs = [ S631, S632, S633 ];
  }
  def C701_T : VFPR<92, "C701"> {
    let SubRegs = [ S701, S702, S703 ];
  }
  def C711_T : VFPR<93, "C711"> {
    let SubRegs = [ S711, S712, S713 ];
  }
  def C721_T : VFPR<94, "C721"> {
    let SubRegs = [ S721, S722, S723 ];
  }
  def C731_T : VFPR<95, "C731"> {
    let SubRegs = [ S731, S732, S733 ];
  }
  def R010_T : VFPR<96, "R010"> {
    let SubRegs = [ S010, S020, S030 ];
  }
  def R011_T : VFPR<97, "R011"> {
    let SubRegs = [ S011, S021, S031 ];
  }
  def R012_T : VFPR<98, "R012"> {
    let SubRegs = [ S012, S022, S032 ];
  }
  def R013_T : VFPR<99, "R013"> {
    let SubRegs = [ S013, S023, S033 ];
  }
  def R110_T : VFPR<100, "R110"> {
    let SubRegs = [ S110, S120, S130 ];
  }
  def R111_T : VFPR<101, "R111"> {
    let SubRegs = [ S111, S121, S131 ];
  }
  def R112_T : VFPR<102, "R112"> {
    let SubRegs = [ S112, S122, S132 ];
  }
  def R113_T : VFPR<103, "R113"> {
    let SubRegs = [ S113, S123, S133 ];
  }
  def R210_T : VFPR<104, "R210"> {
    let SubRegs = [ S210, S220, S230 ];
  }
  def R211_T : VFPR<105, "R211"> {
    let SubRegs = [ S211, S221, S231 ];
  }
  def R212_T : VFPR<106, "R212"> {
    let SubRegs = [ S212, S222, S232 ];
  }
  def R213_T : VFPR<107, "R213"> {
    let SubRegs = [ S213, S223, S233 ];
  }
  def R310_T : VFPR<108, "R310"> {
    let SubRegs = [ S310, S320, S330 ];
  }
  def R311_T : VFPR<109, "R311"> {
    let SubRegs = [ S311, S321, S331 ];
  }
  def R312_T : VFPR<110, "R312"> {
    let SubRegs = [ S312, S322, S332 ];
  }
  def R313_T : VFPR<111, "R313"> {
    let SubRegs = [ S313, S323, S333 ];
  }
  def R410_T : VFPR<112, "R410"> {
    let SubRegs = [ S410, S420, S430 ];
  }
  def R411_T : VFPR<113, "R411"> {
    let SubRegs = [ S411, S421, S431 ];
  }
  def R412_T : VFPR<114, "R412"> {
    let SubRegs = [ S412, S422, S432 ];
  }
  def R413_T : VFPR<115, "R413"> {
    let SubRegs = [ S413, S423, S433 ];
  }
  def R510_T : VFPR<116, "R510"> {
    let SubRegs = [ S510, S520, S530 ];
  }
  def R511_T : VFPR<117, "R511"> {
    let SubRegs = [ S511, S521, S531 ];
  }
  def R512_T : VFPR<118, "R512"> {
    let SubRegs = [ S512, S522, S532 ];
  }
  def R513_T : VFPR<119, "R513"> {
    let SubRegs = [ S513, S523, S533 ];
  }
  def R610_T : VFPR<120, "R610"> {
    let SubRegs = [ S610, S620, S630 ];
  }
  def R611_T : VFPR<121, "R611"> {
    let SubRegs = [ S611, S621, S631 ];
  }
  def R612_T : VFPR<122, "R612"> {
    let SubRegs = [ S612, S622, S632 ];
  }
  def R613_T : VFPR<123, "R613"> {
    let SubRegs = [ S613, S623, S633 ];
  }
  def R710_T : VFPR<124, "R710"> {
    let SubRegs = [ S710, S720, S730 ];
  }
  def R711_T : VFPR<125, "R711"> {
    let SubRegs = [ S711, S721, S731 ];
  }
  def R712_T : VFPR<126, "R712"> {
    let SubRegs = [ S712, S722, S732 ];
  }
  def R713_T : VFPR<127, "R713"> {
    let SubRegs = [ S713, S723, S733 ];
  }
}

let SubRegIndices = [ sub_vfpus_1, sub_vfpus_2, sub_vfpus_3, sub_vfpus_4 ] in {
  def C000_Q : VFPR<0, "C000"> {
    let SubRegs = [ S000, S001, S002, S003 ];
  }
  def C010_Q : VFPR<1, "C010"> {
    let SubRegs = [ S010, S011, S012, S013 ];
  }
  def C020_Q : VFPR<2, "C020"> {
    let SubRegs = [ S020, S021, S022, S023 ];
  }
  def C030_Q : VFPR<3, "C030"> {
    let SubRegs = [ S030, S031, S032, S033 ];
  }
  def C100_Q : VFPR<4, "C100"> {
    let SubRegs = [ S100, S101, S102, S103 ];
  }
  def C110_Q : VFPR<5, "C110"> {
    let SubRegs = [ S110, S111, S112, S113 ];
  }
  def C120_Q : VFPR<6, "C120"> {
    let SubRegs = [ S120, S121, S122, S123 ];
  }
  def C130_Q : VFPR<7, "C130"> {
    let SubRegs = [ S130, S131, S132, S133 ];
  }
  def C200_Q : VFPR<8, "C200"> {
    let SubRegs = [ S200, S201, S202, S203 ];
  }
  def C210_Q : VFPR<9, "C210"> {
    let SubRegs = [ S210, S211, S212, S213 ];
  }
  def C220_Q : VFPR<10, "C220"> {
    let SubRegs = [ S220, S221, S222, S223 ];
  }
  def C230_Q : VFPR<11, "C230"> {
    let SubRegs = [ S230, S231, S232, S233 ];
  }
  def C300_Q : VFPR<12, "C300"> {
    let SubRegs = [ S300, S301, S302, S303 ];
  }
  def C310_Q : VFPR<13, "C310"> {
    let SubRegs = [ S310, S311, S312, S313 ];
  }
  def C320_Q : VFPR<14, "C320"> {
    let SubRegs = [ S320, S321, S322, S323 ];
  }
  def C330_Q : VFPR<15, "C330"> {
    let SubRegs = [ S330, S331, S332, S333 ];
  }
  def C400_Q : VFPR<16, "C400"> {
    let SubRegs = [ S400, S401, S402, S403 ];
  }
  def C410_Q : VFPR<17, "C410"> {
    let SubRegs = [ S410, S411, S412, S413 ];
  }
  def C420_Q : VFPR<18, "C420"> {
    let SubRegs = [ S420, S421, S422, S423 ];
  }
  def C430_Q : VFPR<19, "C430"> {
    let SubRegs = [ S430, S431, S432, S433 ];
  }
  def C500_Q : VFPR<20, "C500"> {
    let SubRegs = [ S500, S501, S502, S503 ];
  }
  def C510_Q : VFPR<21, "C510"> {
    let SubRegs = [ S510, S511, S512, S513 ];
  }
  def C520_Q : VFPR<22, "C520"> {
    let SubRegs = [ S520, S521, S522, S523 ];
  }
  def C530_Q : VFPR<23, "C530"> {
    let SubRegs = [ S530, S531, S532, S533 ];
  }
  def C600_Q : VFPR<24, "C600"> {
    let SubRegs = [ S600, S601, S602, S603 ];
  }
  def C610_Q : VFPR<25, "C610"> {
    let SubRegs = [ S610, S611, S612, S613 ];
  }
  def C620_Q : VFPR<26, "C620"> {
    let SubRegs = [ S620, S621, S622, S623 ];
  }
  def C630_Q : VFPR<27, "C630"> {
    let SubRegs = [ S630, S631, S632, S633 ];
  }
  def C700_Q : VFPR<28, "C700"> {
    let SubRegs = [ S700, S701, S702, S703 ];
  }
  def C710_Q : VFPR<29, "C710"> {
    let SubRegs = [ S710, S711, S712, S713 ];
  }
  def C720_Q : VFPR<30, "C720"> {
    let SubRegs = [ S720, S721, S722, S723 ];
  }
  def C730_Q : VFPR<31, "C730"> {
    let SubRegs = [ S730, S731, S732, S733 ];
  }
  def R000_Q : VFPR<32, "R000"> {
    let SubRegs = [ S000, S010, S020, S030 ];
  }
  def R001_Q : VFPR<33, "R001"> {
    let SubRegs = [ S001, S011, S021, S031 ];
  }
  def R002_Q : VFPR<34, "R002"> {
    let SubRegs = [ S002, S012, S022, S032 ];
  }
  def R003_Q : VFPR<35, "R003"> {
    let SubRegs = [ S003, S013, S023, S033 ];
  }
  def R100_Q : VFPR<36, "R100"> {
    let SubRegs = [ S100, S110, S120, S130 ];
  }
  def R101_Q : VFPR<37, "R101"> {
    let SubRegs = [ S101, S111, S121, S131 ];
  }
  def R102_Q : VFPR<38, "R102"> {
    let SubRegs = [ S102, S112, S122, S132 ];
  }
  def R103_Q : VFPR<39, "R103"> {
    let SubRegs = [ S103, S113, S123, S133 ];
  }
  def R200_Q : VFPR<40, "R200"> {
    let SubRegs = [ S200, S210, S220, S230 ];
  }
  def R201_Q : VFPR<41, "R201"> {
    let SubRegs = [ S201, S211, S221, S231 ];
  }
  def R202_Q : VFPR<42, "R202"> {
    let SubRegs = [ S202, S212, S222, S232 ];
  }
  def R203_Q : VFPR<43, "R203"> {
    let SubRegs = [ S203, S213, S223, S233 ];
  }
  def R300_Q : VFPR<44, "R300"> {
    let SubRegs = [ S300, S310, S320, S330 ];
  }
  def R301_Q : VFPR<45, "R301"> {
    let SubRegs = [ S301, S311, S321, S331 ];
  }
  def R302_Q : VFPR<46, "R302"> {
    let SubRegs = [ S302, S312, S322, S332 ];
  }
  def R303_Q : VFPR<47, "R303"> {
    let SubRegs = [ S303, S313, S323, S333 ];
  }
  def R400_Q : VFPR<48, "R400"> {
    let SubRegs = [ S400, S410, S420, S430 ];
  }
  def R401_Q : VFPR<49, "R401"> {
    let SubRegs = [ S401, S411, S421, S431 ];
  }
  def R402_Q : VFPR<50, "R402"> {
    let SubRegs = [ S402, S412, S422, S432 ];
  }
  def R403_Q : VFPR<51, "R403"> {
    let SubRegs = [ S403, S413, S423, S433 ];
  }
  def R500_Q : VFPR<52, "R500"> {
    let SubRegs = [ S500, S510, S520, S530 ];
  }
  def R501_Q : VFPR<53, "R501"> {
    let SubRegs = [ S501, S511, S521, S531 ];
  }
  def R502_Q : VFPR<54, "R502"> {
    let SubRegs = [ S502, S512, S522, S532 ];
  }
  def R503_Q : VFPR<55, "R503"> {
    let SubRegs = [ S503, S513, S523, S533 ];
  }
  def R600_Q : VFPR<56, "R600"> {
    let SubRegs = [ S600, S610, S620, S630 ];
  }
  def R601_Q : VFPR<57, "R601"> {
    let SubRegs = [ S601, S611, S621, S631 ];
  }
  def R602_Q : VFPR<58, "R602"> {
    let SubRegs = [ S602, S612, S622, S632 ];
  }
  def R603_Q : VFPR<59, "R603"> {
    let SubRegs = [ S603, S613, S623, S633 ];
  }
  def R700_Q : VFPR<60, "R700"> {
    let SubRegs = [ S700, S710, S720, S730 ];
  }
  def R701_Q : VFPR<61, "R701"> {
    let SubRegs = [ S701, S711, S721, S731 ];
  }
  def R702_Q : VFPR<62, "R702"> {
    let SubRegs = [ S702, S712, S722, S732 ];
  }
  def R703_Q : VFPR<63, "R703"> {
    let SubRegs = [ S703, S713, S723, S733 ];
  }
}

let SubRegIndices = [ sub_vfpup_1, sub_vfpup_2 ] in {
  def M000_P : VFPR<0, "M000"> {
    let SubRegs = [ C000_P, C010_P ];
  }
  def M000_PI : VFPR<32, "M000"> {
    let Aliases = [ M000_P ];
    let SubRegs = [ C000_P, C010_P ];
  }
  def M020_P : VFPR<2, "M020"> {
    let SubRegs = [ C020_P, C030_P ];
  }
  def M020_PI : VFPR<34, "M020"> {
    let Aliases = [ M020_P ];
    let SubRegs = [ C020_P, C030_P ];
  }
  def M100_P : VFPR<4, "M100"> {
    let SubRegs = [ C100_P, C110_P ];
  }
  def M100_PI : VFPR<36, "M100"> {
    let Aliases = [ M100_P ];
    let SubRegs = [ C100_P, C110_P ];
  }
  def M120_P : VFPR<6, "M120"> {
    let SubRegs = [ C120_P, C130_P ];
  }
  def M120_PI : VFPR<38, "M120"> {
    let Aliases = [ M120_P ];
    let SubRegs = [ C120_P, C130_P ];
  }
  def M200_P : VFPR<8, "M200"> {
    let SubRegs = [ C200_P, C210_P ];
  }
  def M200_PI : VFPR<40, "M200"> {
    let Aliases = [ M200_P ];
    let SubRegs = [ C200_P, C210_P ];
  }
  def M220_P : VFPR<10, "M220"> {
    let SubRegs = [ C220_P, C230_P ];
  }
  def M220_PI : VFPR<42, "M220"> {
    let Aliases = [ M220_P ];
    let SubRegs = [ C220_P, C230_P ];
  }
  def M300_P : VFPR<12, "M300"> {
    let SubRegs = [ C300_P, C310_P ];
  }
  def M300_PI : VFPR<44, "M300"> {
    let Aliases = [ M300_P ];
    let SubRegs = [ C300_P, C310_P ];
  }
  def M320_P : VFPR<14, "M320"> {
    let SubRegs = [ C320_P, C330_P ];
  }
  def M320_PI : VFPR<46, "M320"> {
    let Aliases = [ M320_P ];
    let SubRegs = [ C320_P, C330_P ];
  }
  def M400_P : VFPR<16, "M400"> {
    let SubRegs = [ C400_P, C410_P ];
  }
  def M400_PI : VFPR<48, "M400"> {
    let Aliases = [ M400_P ];
    let SubRegs = [ C400_P, C410_P ];
  }
  def M420_P : VFPR<18, "M420"> {
    let SubRegs = [ C420_P, C430_P ];
  }
  def M420_PI : VFPR<50, "M420"> {
    let Aliases = [ M420_P ];
    let SubRegs = [ C420_P, C430_P ];
  }
  def M500_P : VFPR<20, "M500"> {
    let SubRegs = [ C500_P, C510_P ];
  }
  def M500_PI : VFPR<52, "M500"> {
    let Aliases = [ M500_P ];
    let SubRegs = [ C500_P, C510_P ];
  }
  def M520_P : VFPR<22, "M520"> {
    let SubRegs = [ C520_P, C530_P ];
  }
  def M520_PI : VFPR<54, "M520"> {
    let Aliases = [ M520_P ];
    let SubRegs = [ C520_P, C530_P ];
  }
  def M600_P : VFPR<24, "M600"> {
    let SubRegs = [ C600_P, C610_P ];
  }
  def M600_PI : VFPR<56, "M600"> {
    let Aliases = [ M600_P ];
    let SubRegs = [ C600_P, C610_P ];
  }
  def M620_P : VFPR<26, "M620"> {
    let SubRegs = [ C620_P, C630_P ];
  }
  def M620_PI : VFPR<58, "M620"> {
    let Aliases = [ M620_P ];
    let SubRegs = [ C620_P, C630_P ];
  }
  def M700_P : VFPR<28, "M700"> {
    let SubRegs = [ C700_P, C710_P ];
  }
  def M700_PI : VFPR<60, "M700"> {
    let Aliases = [ M700_P ];
    let SubRegs = [ C700_P, C710_P ];
  }
  def M720_P : VFPR<30, "M720"> {
    let SubRegs = [ C720_P, C730_P ];
  }
  def M720_PI : VFPR<62, "M720"> {
    let Aliases = [ M720_P ];
    let SubRegs = [ C720_P, C730_P ];
  }
  def E000_P : VFPR<32, "E000"> {
    let SubRegs = [ C000_P, C010_P ];
  }
  def E000_PI : VFPR<0, "E000"> {
    let Aliases = [ E000_P ];
    let SubRegs = [ C000_P, C010_P ];
  }
  def E002_P : VFPR<34, "E002"> {
    let SubRegs = [ C002_P, C012_P ];
  }
  def E002_PI : VFPR<2, "E002"> {
    let Aliases = [ E002_P ];
    let SubRegs = [ C002_P, C012_P ];
  }
  def E100_P : VFPR<36, "E100"> {
    let SubRegs = [ C100_P, C110_P ];
  }
  def E100_PI : VFPR<4, "E100"> {
    let Aliases = [ E100_P ];
    let SubRegs = [ C100_P, C110_P ];
  }
  def E102_P : VFPR<38, "E102"> {
    let SubRegs = [ C102_P, C112_P ];
  }
  def E102_PI : VFPR<6, "E102"> {
    let Aliases = [ E102_P ];
    let SubRegs = [ C102_P, C112_P ];
  }
  def E200_P : VFPR<40, "E200"> {
    let SubRegs = [ C200_P, C210_P ];
  }
  def E200_PI : VFPR<8, "E200"> {
    let Aliases = [ E200_P ];
    let SubRegs = [ C200_P, C210_P ];
  }
  def E202_P : VFPR<42, "E202"> {
    let SubRegs = [ C202_P, C212_P ];
  }
  def E202_PI : VFPR<10, "E202"> {
    let Aliases = [ E202_P ];
    let SubRegs = [ C202_P, C212_P ];
  }
  def E300_P : VFPR<44, "E300"> {
    let SubRegs = [ C300_P, C310_P ];
  }
  def E300_PI : VFPR<12, "E300"> {
    let Aliases = [ E300_P ];
    let SubRegs = [ C300_P, C310_P ];
  }
  def E302_P : VFPR<46, "E302"> {
    let SubRegs = [ C302_P, C312_P ];
  }
  def E302_PI : VFPR<14, "E302"> {
    let Aliases = [ E302_P ];
    let SubRegs = [ C302_P, C312_P ];
  }
  def E400_P : VFPR<48, "E400"> {
    let SubRegs = [ C400_P, C410_P ];
  }
  def E400_PI : VFPR<16, "E400"> {
    let Aliases = [ E400_P ];
    let SubRegs = [ C400_P, C410_P ];
  }
  def E402_P : VFPR<50, "E402"> {
    let SubRegs = [ C402_P, C412_P ];
  }
  def E402_PI : VFPR<18, "E402"> {
    let Aliases = [ E402_P ];
    let SubRegs = [ C402_P, C412_P ];
  }
  def E500_P : VFPR<52, "E500"> {
    let SubRegs = [ C500_P, C510_P ];
  }
  def E500_PI : VFPR<20, "E500"> {
    let Aliases = [ E500_P ];
    let SubRegs = [ C500_P, C510_P ];
  }
  def E502_P : VFPR<54, "E502"> {
    let SubRegs = [ C502_P, C512_P ];
  }
  def E502_PI : VFPR<22, "E502"> {
    let Aliases = [ E502_P ];
    let SubRegs = [ C502_P, C512_P ];
  }
  def E600_P : VFPR<56, "E600"> {
    let SubRegs = [ C600_P, C610_P ];
  }
  def E600_PI : VFPR<24, "E600"> {
    let Aliases = [ E600_P ];
    let SubRegs = [ C600_P, C610_P ];
  }
  def E602_P : VFPR<58, "E602"> {
    let SubRegs = [ C602_P, C612_P ];
  }
  def E602_PI : VFPR<26, "E602"> {
    let Aliases = [ E602_P ];
    let SubRegs = [ C602_P, C612_P ];
  }
  def E700_P : VFPR<60, "E700"> {
    let SubRegs = [ C700_P, C710_P ];
  }
  def E700_PI : VFPR<28, "E700"> {
    let Aliases = [ E700_P ];
    let SubRegs = [ C700_P, C710_P ];
  }
  def E702_P : VFPR<62, "E702"> {
    let SubRegs = [ C702_P, C712_P ];
  }
  def E702_PI : VFPR<30, "E702"> {
    let Aliases = [ E702_P ];
    let SubRegs = [ C702_P, C712_P ];
  }
  def M002_P : VFPR<64, "M002"> {
    let SubRegs = [ C002_P, C012_P ];
  }
  def M002_PI : VFPR<96, "M002"> {
    let Aliases = [ M002_P ];
    let SubRegs = [ C002_P, C012_P ];
  }
  def M022_P : VFPR<66, "M022"> {
    let SubRegs = [ C022_P, C032_P ];
  }
  def M022_PI : VFPR<98, "M022"> {
    let Aliases = [ M022_P ];
    let SubRegs = [ C022_P, C032_P ];
  }
  def M102_P : VFPR<68, "M102"> {
    let SubRegs = [ C102_P, C112_P ];
  }
  def M102_PI : VFPR<100, "M102"> {
    let Aliases = [ M102_P ];
    let SubRegs = [ C102_P, C112_P ];
  }
  def M122_P : VFPR<70, "M122"> {
    let SubRegs = [ C122_P, C132_P ];
  }
  def M122_PI : VFPR<102, "M122"> {
    let Aliases = [ M122_P ];
    let SubRegs = [ C122_P, C132_P ];
  }
  def M202_P : VFPR<72, "M202"> {
    let SubRegs = [ C202_P, C212_P ];
  }
  def M202_PI : VFPR<104, "M202"> {
    let Aliases = [ M202_P ];
    let SubRegs = [ C202_P, C212_P ];
  }
  def M222_P : VFPR<74, "M222"> {
    let SubRegs = [ C222_P, C232_P ];
  }
  def M222_PI : VFPR<106, "M222"> {
    let Aliases = [ M222_P ];
    let SubRegs = [ C222_P, C232_P ];
  }
  def M302_P : VFPR<76, "M302"> {
    let SubRegs = [ C302_P, C312_P ];
  }
  def M302_PI : VFPR<108, "M302"> {
    let Aliases = [ M302_P ];
    let SubRegs = [ C302_P, C312_P ];
  }
  def M322_P : VFPR<78, "M322"> {
    let SubRegs = [ C322_P, C332_P ];
  }
  def M322_PI : VFPR<110, "M322"> {
    let Aliases = [ M322_P ];
    let SubRegs = [ C322_P, C332_P ];
  }
  def M402_P : VFPR<80, "M402"> {
    let SubRegs = [ C402_P, C412_P ];
  }
  def M402_PI : VFPR<112, "M402"> {
    let Aliases = [ M402_P ];
    let SubRegs = [ C402_P, C412_P ];
  }
  def M422_P : VFPR<82, "M422"> {
    let SubRegs = [ C422_P, C432_P ];
  }
  def M422_PI : VFPR<114, "M422"> {
    let Aliases = [ M422_P ];
    let SubRegs = [ C422_P, C432_P ];
  }
  def M502_P : VFPR<84, "M502"> {
    let SubRegs = [ C502_P, C512_P ];
  }
  def M502_PI : VFPR<116, "M502"> {
    let Aliases = [ M502_P ];
    let SubRegs = [ C502_P, C512_P ];
  }
  def M522_P : VFPR<86, "M522"> {
    let SubRegs = [ C522_P, C532_P ];
  }
  def M522_PI : VFPR<118, "M522"> {
    let Aliases = [ M522_P ];
    let SubRegs = [ C522_P, C532_P ];
  }
  def M602_P : VFPR<88, "M602"> {
    let SubRegs = [ C602_P, C612_P ];
  }
  def M602_PI : VFPR<120, "M602"> {
    let Aliases = [ M602_P ];
    let SubRegs = [ C602_P, C612_P ];
  }
  def M622_P : VFPR<90, "M622"> {
    let SubRegs = [ C622_P, C632_P ];
  }
  def M622_PI : VFPR<122, "M622"> {
    let Aliases = [ M622_P ];
    let SubRegs = [ C622_P, C632_P ];
  }
  def M702_P : VFPR<92, "M702"> {
    let SubRegs = [ C702_P, C712_P ];
  }
  def M702_PI : VFPR<124, "M702"> {
    let Aliases = [ M702_P ];
    let SubRegs = [ C702_P, C712_P ];
  }
  def M722_P : VFPR<94, "M722"> {
    let SubRegs = [ C722_P, C732_P ];
  }
  def M722_PI : VFPR<126, "M722"> {
    let Aliases = [ M722_P ];
    let SubRegs = [ C722_P, C732_P ];
  }
  def E020_P : VFPR<96, "E020"> {
    let SubRegs = [ C020_P, C030_P ];
  }
  def E020_PI : VFPR<64, "E020"> {
    let Aliases = [ E020_P ];
    let SubRegs = [ C020_P, C030_P ];
  }
  def E022_P : VFPR<98, "E022"> {
    let SubRegs = [ C022_P, C032_P ];
  }
  def E022_PI : VFPR<66, "E022"> {
    let Aliases = [ E022_P ];
    let SubRegs = [ C022_P, C032_P ];
  }
  def E120_P : VFPR<100, "E120"> {
    let SubRegs = [ C120_P, C130_P ];
  }
  def E120_PI : VFPR<68, "E120"> {
    let Aliases = [ E120_P ];
    let SubRegs = [ C120_P, C130_P ];
  }
  def E122_P : VFPR<102, "E122"> {
    let SubRegs = [ C122_P, C132_P ];
  }
  def E122_PI : VFPR<70, "E122"> {
    let Aliases = [ E122_P ];
    let SubRegs = [ C122_P, C132_P ];
  }
  def E220_P : VFPR<104, "E220"> {
    let SubRegs = [ C220_P, C230_P ];
  }
  def E220_PI : VFPR<72, "E220"> {
    let Aliases = [ E220_P ];
    let SubRegs = [ C220_P, C230_P ];
  }
  def E222_P : VFPR<106, "E222"> {
    let SubRegs = [ C222_P, C232_P ];
  }
  def E222_PI : VFPR<74, "E222"> {
    let Aliases = [ E222_P ];
    let SubRegs = [ C222_P, C232_P ];
  }
  def E320_P : VFPR<108, "E320"> {
    let SubRegs = [ C320_P, C330_P ];
  }
  def E320_PI : VFPR<76, "E320"> {
    let Aliases = [ E320_P ];
    let SubRegs = [ C320_P, C330_P ];
  }
  def E322_P : VFPR<110, "E322"> {
    let SubRegs = [ C322_P, C332_P ];
  }
  def E322_PI : VFPR<78, "E322"> {
    let Aliases = [ E322_P ];
    let SubRegs = [ C322_P, C332_P ];
  }
  def E420_P : VFPR<112, "E420"> {
    let SubRegs = [ C420_P, C430_P ];
  }
  def E420_PI : VFPR<80, "E420"> {
    let Aliases = [ E420_P ];
    let SubRegs = [ C420_P, C430_P ];
  }
  def E422_P : VFPR<114, "E422"> {
    let SubRegs = [ C422_P, C432_P ];
  }
  def E422_PI : VFPR<82, "E422"> {
    let Aliases = [ E422_P ];
    let SubRegs = [ C422_P, C432_P ];
  }
  def E520_P : VFPR<116, "E520"> {
    let SubRegs = [ C520_P, C530_P ];
  }
  def E520_PI : VFPR<84, "E520"> {
    let Aliases = [ E520_P ];
    let SubRegs = [ C520_P, C530_P ];
  }
  def E522_P : VFPR<118, "E522"> {
    let SubRegs = [ C522_P, C532_P ];
  }
  def E522_PI : VFPR<86, "E522"> {
    let Aliases = [ E522_P ];
    let SubRegs = [ C522_P, C532_P ];
  }
  def E620_P : VFPR<120, "E620"> {
    let SubRegs = [ C620_P, C630_P ];
  }
  def E620_PI : VFPR<88, "E620"> {
    let Aliases = [ E620_P ];
    let SubRegs = [ C620_P, C630_P ];
  }
  def E622_P : VFPR<122, "E622"> {
    let SubRegs = [ C622_P, C632_P ];
  }
  def E622_PI : VFPR<90, "E622"> {
    let Aliases = [ E622_P ];
    let SubRegs = [ C622_P, C632_P ];
  }
  def E720_P : VFPR<124, "E720"> {
    let SubRegs = [ C720_P, C730_P ];
  }
  def E720_PI : VFPR<92, "E720"> {
    let Aliases = [ E720_P ];
    let SubRegs = [ C720_P, C730_P ];
  }
  def E722_P : VFPR<126, "E722"> {
    let SubRegs = [ C722_P, C732_P ];
  }
  def E722_PI : VFPR<94, "E722"> {
    let Aliases = [ E722_P ];
    let SubRegs = [ C722_P, C732_P ];
  }
}

let SubRegIndices = [ sub_vfput_1, sub_vfput_2, sub_vfput_3 ] in {
  def M000_T : VFPR<0, "M000"> {
    let SubRegs = [ C000_T, C010_T, C020_T ];
  }
  def M000_TI : VFPR<32, "M000"> {
    let Aliases = [ M000_T ];
    let SubRegs = [ C000_T, C010_T, C020_T ];
  }
  def M010_T : VFPR<1, "M010"> {
    let SubRegs = [ C010_T, C020_T, C030_T ];
  }
  def M010_TI : VFPR<33, "M010"> {
    let Aliases = [ M010_T ];
    let SubRegs = [ C010_T, C020_T, C030_T ];
  }
  def M100_T : VFPR<4, "M100"> {
    let SubRegs = [ C100_T, C110_T, C120_T ];
  }
  def M100_TI : VFPR<36, "M100"> {
    let Aliases = [ M100_T ];
    let SubRegs = [ C100_T, C110_T, C120_T ];
  }
  def M110_T : VFPR<5, "M110"> {
    let SubRegs = [ C110_T, C120_T, C130_T ];
  }
  def M110_TI : VFPR<37, "M110"> {
    let Aliases = [ M110_T ];
    let SubRegs = [ C110_T, C120_T, C130_T ];
  }
  def M200_T : VFPR<8, "M200"> {
    let SubRegs = [ C200_T, C210_T, C220_T ];
  }
  def M200_TI : VFPR<40, "M200"> {
    let Aliases = [ M200_T ];
    let SubRegs = [ C200_T, C210_T, C220_T ];
  }
  def M210_T : VFPR<9, "M210"> {
    let SubRegs = [ C210_T, C220_T, C230_T ];
  }
  def M210_TI : VFPR<41, "M210"> {
    let Aliases = [ M210_T ];
    let SubRegs = [ C210_T, C220_T, C230_T ];
  }
  def M300_T : VFPR<12, "M300"> {
    let SubRegs = [ C300_T, C310_T, C320_T ];
  }
  def M300_TI : VFPR<44, "M300"> {
    let Aliases = [ M300_T ];
    let SubRegs = [ C300_T, C310_T, C320_T ];
  }
  def M310_T : VFPR<13, "M310"> {
    let SubRegs = [ C310_T, C320_T, C330_T ];
  }
  def M310_TI : VFPR<45, "M310"> {
    let Aliases = [ M310_T ];
    let SubRegs = [ C310_T, C320_T, C330_T ];
  }
  def M400_T : VFPR<16, "M400"> {
    let SubRegs = [ C400_T, C410_T, C420_T ];
  }
  def M400_TI : VFPR<48, "M400"> {
    let Aliases = [ M400_T ];
    let SubRegs = [ C400_T, C410_T, C420_T ];
  }
  def M410_T : VFPR<17, "M410"> {
    let SubRegs = [ C410_T, C420_T, C430_T ];
  }
  def M410_TI : VFPR<49, "M410"> {
    let Aliases = [ M410_T ];
    let SubRegs = [ C410_T, C420_T, C430_T ];
  }
  def M500_T : VFPR<20, "M500"> {
    let SubRegs = [ C500_T, C510_T, C520_T ];
  }
  def M500_TI : VFPR<52, "M500"> {
    let Aliases = [ M500_T ];
    let SubRegs = [ C500_T, C510_T, C520_T ];
  }
  def M510_T : VFPR<21, "M510"> {
    let SubRegs = [ C510_T, C520_T, C530_T ];
  }
  def M510_TI : VFPR<53, "M510"> {
    let Aliases = [ M510_T ];
    let SubRegs = [ C510_T, C520_T, C530_T ];
  }
  def M600_T : VFPR<24, "M600"> {
    let SubRegs = [ C600_T, C610_T, C620_T ];
  }
  def M600_TI : VFPR<56, "M600"> {
    let Aliases = [ M600_T ];
    let SubRegs = [ C600_T, C610_T, C620_T ];
  }
  def M610_T : VFPR<25, "M610"> {
    let SubRegs = [ C610_T, C620_T, C630_T ];
  }
  def M610_TI : VFPR<57, "M610"> {
    let Aliases = [ M610_T ];
    let SubRegs = [ C610_T, C620_T, C630_T ];
  }
  def M700_T : VFPR<28, "M700"> {
    let SubRegs = [ C700_T, C710_T, C720_T ];
  }
  def M700_TI : VFPR<60, "M700"> {
    let Aliases = [ M700_T ];
    let SubRegs = [ C700_T, C710_T, C720_T ];
  }
  def M710_T : VFPR<29, "M710"> {
    let SubRegs = [ C710_T, C720_T, C730_T ];
  }
  def M710_TI : VFPR<61, "M710"> {
    let Aliases = [ M710_T ];
    let SubRegs = [ C710_T, C720_T, C730_T ];
  }
  def E000_T : VFPR<32, "E000"> {
    let SubRegs = [ C000_T, C010_T, C020_T ];
  }
  def E000_TI : VFPR<0, "E000"> {
    let Aliases = [ E000_T ];
    let SubRegs = [ C000_T, C010_T, C020_T ];
  }
  def E001_T : VFPR<33, "E001"> {
    let SubRegs = [ C001_T, C011_T, C021_T ];
  }
  def E001_TI : VFPR<1, "E001"> {
    let Aliases = [ E001_T ];
    let SubRegs = [ C001_T, C011_T, C021_T ];
  }
  def E100_T : VFPR<36, "E100"> {
    let SubRegs = [ C100_T, C110_T, C120_T ];
  }
  def E100_TI : VFPR<4, "E100"> {
    let Aliases = [ E100_T ];
    let SubRegs = [ C100_T, C110_T, C120_T ];
  }
  def E101_T : VFPR<37, "E101"> {
    let SubRegs = [ C101_T, C111_T, C121_T ];
  }
  def E101_TI : VFPR<5, "E101"> {
    let Aliases = [ E101_T ];
    let SubRegs = [ C101_T, C111_T, C121_T ];
  }
  def E200_T : VFPR<40, "E200"> {
    let SubRegs = [ C200_T, C210_T, C220_T ];
  }
  def E200_TI : VFPR<8, "E200"> {
    let Aliases = [ E200_T ];
    let SubRegs = [ C200_T, C210_T, C220_T ];
  }
  def E201_T : VFPR<41, "E201"> {
    let SubRegs = [ C201_T, C211_T, C221_T ];
  }
  def E201_TI : VFPR<9, "E201"> {
    let Aliases = [ E201_T ];
    let SubRegs = [ C201_T, C211_T, C221_T ];
  }
  def E300_T : VFPR<44, "E300"> {
    let SubRegs = [ C300_T, C310_T, C320_T ];
  }
  def E300_TI : VFPR<12, "E300"> {
    let Aliases = [ E300_T ];
    let SubRegs = [ C300_T, C310_T, C320_T ];
  }
  def E301_T : VFPR<45, "E301"> {
    let SubRegs = [ C301_T, C311_T, C321_T ];
  }
  def E301_TI : VFPR<13, "E301"> {
    let Aliases = [ E301_T ];
    let SubRegs = [ C301_T, C311_T, C321_T ];
  }
  def E400_T : VFPR<48, "E400"> {
    let SubRegs = [ C400_T, C410_T, C420_T ];
  }
  def E400_TI : VFPR<16, "E400"> {
    let Aliases = [ E400_T ];
    let SubRegs = [ C400_T, C410_T, C420_T ];
  }
  def E401_T : VFPR<49, "E401"> {
    let SubRegs = [ C401_T, C411_T, C421_T ];
  }
  def E401_TI : VFPR<17, "E401"> {
    let Aliases = [ E401_T ];
    let SubRegs = [ C401_T, C411_T, C421_T ];
  }
  def E500_T : VFPR<52, "E500"> {
    let SubRegs = [ C500_T, C510_T, C520_T ];
  }
  def E500_TI : VFPR<20, "E500"> {
    let Aliases = [ E500_T ];
    let SubRegs = [ C500_T, C510_T, C520_T ];
  }
  def E501_T : VFPR<53, "E501"> {
    let SubRegs = [ C501_T, C511_T, C521_T ];
  }
  def E501_TI : VFPR<21, "E501"> {
    let Aliases = [ E501_T ];
    let SubRegs = [ C501_T, C511_T, C521_T ];
  }
  def E600_T : VFPR<56, "E600"> {
    let SubRegs = [ C600_T, C610_T, C620_T ];
  }
  def E600_TI : VFPR<24, "E600"> {
    let Aliases = [ E600_T ];
    let SubRegs = [ C600_T, C610_T, C620_T ];
  }
  def E601_T : VFPR<57, "E601"> {
    let SubRegs = [ C601_T, C611_T, C621_T ];
  }
  def E601_TI : VFPR<25, "E601"> {
    let Aliases = [ E601_T ];
    let SubRegs = [ C601_T, C611_T, C621_T ];
  }
  def E700_T : VFPR<60, "E700"> {
    let SubRegs = [ C700_T, C710_T, C720_T ];
  }
  def E700_TI : VFPR<28, "E700"> {
    let Aliases = [ E700_T ];
    let SubRegs = [ C700_T, C710_T, C720_T ];
  }
  def E701_T : VFPR<61, "E701"> {
    let SubRegs = [ C701_T, C711_T, C721_T ];
  }
  def E701_TI : VFPR<29, "E701"> {
    let Aliases = [ E701_T ];
    let SubRegs = [ C701_T, C711_T, C721_T ];
  }
  def M001_T : VFPR<64, "M001"> {
    let SubRegs = [ C001_T, C011_T, C021_T ];
  }
  def M001_TI : VFPR<96, "M001"> {
    let Aliases = [ M001_T ];
    let SubRegs = [ C001_T, C011_T, C021_T ];
  }
  def M011_T : VFPR<65, "M011"> {
    let SubRegs = [ C011_T, C021_T, C031_T ];
  }
  def M011_TI : VFPR<97, "M011"> {
    let Aliases = [ M011_T ];
    let SubRegs = [ C011_T, C021_T, C031_T ];
  }
  def M101_T : VFPR<68, "M101"> {
    let SubRegs = [ C101_T, C111_T, C121_T ];
  }
  def M101_TI : VFPR<100, "M101"> {
    let Aliases = [ M101_T ];
    let SubRegs = [ C101_T, C111_T, C121_T ];
  }
  def M111_T : VFPR<69, "M111"> {
    let SubRegs = [ C111_T, C121_T, C131_T ];
  }
  def M111_TI : VFPR<101, "M111"> {
    let Aliases = [ M111_T ];
    let SubRegs = [ C111_T, C121_T, C131_T ];
  }
  def M201_T : VFPR<72, "M201"> {
    let SubRegs = [ C201_T, C211_T, C221_T ];
  }
  def M201_TI : VFPR<104, "M201"> {
    let Aliases = [ M201_T ];
    let SubRegs = [ C201_T, C211_T, C221_T ];
  }
  def M211_T : VFPR<73, "M211"> {
    let SubRegs = [ C211_T, C221_T, C231_T ];
  }
  def M211_TI : VFPR<105, "M211"> {
    let Aliases = [ M211_T ];
    let SubRegs = [ C211_T, C221_T, C231_T ];
  }
  def M301_T : VFPR<76, "M301"> {
    let SubRegs = [ C301_T, C311_T, C321_T ];
  }
  def M301_TI : VFPR<108, "M301"> {
    let Aliases = [ M301_T ];
    let SubRegs = [ C301_T, C311_T, C321_T ];
  }
  def M311_T : VFPR<77, "M311"> {
    let SubRegs = [ C311_T, C321_T, C331_T ];
  }
  def M311_TI : VFPR<109, "M311"> {
    let Aliases = [ M311_T ];
    let SubRegs = [ C311_T, C321_T, C331_T ];
  }
  def M401_T : VFPR<80, "M401"> {
    let SubRegs = [ C401_T, C411_T, C421_T ];
  }
  def M401_TI : VFPR<112, "M401"> {
    let Aliases = [ M401_T ];
    let SubRegs = [ C401_T, C411_T, C421_T ];
  }
  def M411_T : VFPR<81, "M411"> {
    let SubRegs = [ C411_T, C421_T, C431_T ];
  }
  def M411_TI : VFPR<113, "M411"> {
    let Aliases = [ M411_T ];
    let SubRegs = [ C411_T, C421_T, C431_T ];
  }
  def M501_T : VFPR<84, "M501"> {
    let SubRegs = [ C501_T, C511_T, C521_T ];
  }
  def M501_TI : VFPR<116, "M501"> {
    let Aliases = [ M501_T ];
    let SubRegs = [ C501_T, C511_T, C521_T ];
  }
  def M511_T : VFPR<85, "M511"> {
    let SubRegs = [ C511_T, C521_T, C531_T ];
  }
  def M511_TI : VFPR<117, "M511"> {
    let Aliases = [ M511_T ];
    let SubRegs = [ C511_T, C521_T, C531_T ];
  }
  def M601_T : VFPR<88, "M601"> {
    let SubRegs = [ C601_T, C611_T, C621_T ];
  }
  def M601_TI : VFPR<120, "M601"> {
    let Aliases = [ M601_T ];
    let SubRegs = [ C601_T, C611_T, C621_T ];
  }
  def M611_T : VFPR<89, "M611"> {
    let SubRegs = [ C611_T, C621_T, C631_T ];
  }
  def M611_TI : VFPR<121, "M611"> {
    let Aliases = [ M611_T ];
    let SubRegs = [ C611_T, C621_T, C631_T ];
  }
  def M701_T : VFPR<92, "M701"> {
    let SubRegs = [ C701_T, C711_T, C721_T ];
  }
  def M701_TI : VFPR<124, "M701"> {
    let Aliases = [ M701_T ];
    let SubRegs = [ C701_T, C711_T, C721_T ];
  }
  def M711_T : VFPR<93, "M711"> {
    let SubRegs = [ C711_T, C721_T, C731_T ];
  }
  def M711_TI : VFPR<125, "M711"> {
    let Aliases = [ M711_T ];
    let SubRegs = [ C711_T, C721_T, C731_T ];
  }
  def E010_T : VFPR<96, "E010"> {
    let SubRegs = [ C010_T, C020_T, C030_T ];
  }
  def E010_TI : VFPR<64, "E010"> {
    let Aliases = [ E010_T ];
    let SubRegs = [ C010_T, C020_T, C030_T ];
  }
  def E011_T : VFPR<97, "E011"> {
    let SubRegs = [ C011_T, C021_T, C031_T ];
  }
  def E011_TI : VFPR<65, "E011"> {
    let Aliases = [ E011_T ];
    let SubRegs = [ C011_T, C021_T, C031_T ];
  }
  def E110_T : VFPR<100, "E110"> {
    let SubRegs = [ C110_T, C120_T, C130_T ];
  }
  def E110_TI : VFPR<68, "E110"> {
    let Aliases = [ E110_T ];
    let SubRegs = [ C110_T, C120_T, C130_T ];
  }
  def E111_T : VFPR<101, "E111"> {
    let SubRegs = [ C111_T, C121_T, C131_T ];
  }
  def E111_TI : VFPR<69, "E111"> {
    let Aliases = [ E111_T ];
    let SubRegs = [ C111_T, C121_T, C131_T ];
  }
  def E210_T : VFPR<104, "E210"> {
    let SubRegs = [ C210_T, C220_T, C230_T ];
  }
  def E210_TI : VFPR<72, "E210"> {
    let Aliases = [ E210_T ];
    let SubRegs = [ C210_T, C220_T, C230_T ];
  }
  def E211_T : VFPR<105, "E211"> {
    let SubRegs = [ C211_T, C221_T, C231_T ];
  }
  def E211_TI : VFPR<73, "E211"> {
    let Aliases = [ E211_T ];
    let SubRegs = [ C211_T, C221_T, C231_T ];
  }
  def E310_T : VFPR<108, "E310"> {
    let SubRegs = [ C310_T, C320_T, C330_T ];
  }
  def E310_TI : VFPR<76, "E310"> {
    let Aliases = [ E310_T ];
    let SubRegs = [ C310_T, C320_T, C330_T ];
  }
  def E311_T : VFPR<109, "E311"> {
    let SubRegs = [ C311_T, C321_T, C331_T ];
  }
  def E311_TI : VFPR<77, "E311"> {
    let Aliases = [ E311_T ];
    let SubRegs = [ C311_T, C321_T, C331_T ];
  }
  def E410_T : VFPR<112, "E410"> {
    let SubRegs = [ C410_T, C420_T, C430_T ];
  }
  def E410_TI : VFPR<80, "E410"> {
    let Aliases = [ E410_T ];
    let SubRegs = [ C410_T, C420_T, C430_T ];
  }
  def E411_T : VFPR<113, "E411"> {
    let SubRegs = [ C411_T, C421_T, C431_T ];
  }
  def E411_TI : VFPR<81, "E411"> {
    let Aliases = [ E411_T ];
    let SubRegs = [ C411_T, C421_T, C431_T ];
  }
  def E510_T : VFPR<116, "E510"> {
    let SubRegs = [ C510_T, C520_T, C530_T ];
  }
  def E510_TI : VFPR<84, "E510"> {
    let Aliases = [ E510_T ];
    let SubRegs = [ C510_T, C520_T, C530_T ];
  }
  def E511_T : VFPR<117, "E511"> {
    let SubRegs = [ C511_T, C521_T, C531_T ];
  }
  def E511_TI : VFPR<85, "E511"> {
    let Aliases = [ E511_T ];
    let SubRegs = [ C511_T, C521_T, C531_T ];
  }
  def E610_T : VFPR<120, "E610"> {
    let SubRegs = [ C610_T, C620_T, C630_T ];
  }
  def E610_TI : VFPR<88, "E610"> {
    let Aliases = [ E610_T ];
    let SubRegs = [ C610_T, C620_T, C630_T ];
  }
  def E611_T : VFPR<121, "E611"> {
    let SubRegs = [ C611_T, C621_T, C631_T ];
  }
  def E611_TI : VFPR<89, "E611"> {
    let Aliases = [ E611_T ];
    let SubRegs = [ C611_T, C621_T, C631_T ];
  }
  def E710_T : VFPR<124, "E710"> {
    let SubRegs = [ C710_T, C720_T, C730_T ];
  }
  def E710_TI : VFPR<92, "E710"> {
    let Aliases = [ E710_T ];
    let SubRegs = [ C710_T, C720_T, C730_T ];
  }
  def E711_T : VFPR<125, "E711"> {
    let SubRegs = [ C711_T, C721_T, C731_T ];
  }
  def E711_TI : VFPR<93, "E711"> {
    let Aliases = [ E711_T ];
    let SubRegs = [ C711_T, C721_T, C731_T ];
  }
}

let SubRegIndices = [ sub_vfpuq_1, sub_vfpuq_2, sub_vfpuq_3, sub_vfpuq_4 ] in {
  def M000_Q : VFPR<0, "M000"> {
    let SubRegs = [ C000_Q, C010_Q, C020_Q, C030_Q ];
  }
  def M000_QI : VFPR<32, "M000"> {
    let Aliases = [ M000_Q ];
    let SubRegs = [ C000_Q, C010_Q, C020_Q, C030_Q ];
  }
  def M100_Q : VFPR<4, "M100"> {
    let SubRegs = [ C100_Q, C110_Q, C120_Q, C130_Q ];
  }
  def M100_QI : VFPR<36, "M100"> {
    let Aliases = [ M100_Q ];
    let SubRegs = [ C100_Q, C110_Q, C120_Q, C130_Q ];
  }
  def M200_Q : VFPR<8, "M200"> {
    let SubRegs = [ C200_Q, C210_Q, C220_Q, C230_Q ];
  }
  def M200_QI : VFPR<40, "M200"> {
    let Aliases = [ M200_Q ];
    let SubRegs = [ C200_Q, C210_Q, C220_Q, C230_Q ];
  }
  def M300_Q : VFPR<12, "M300"> {
    let SubRegs = [ C300_Q, C310_Q, C320_Q, C330_Q ];
  }
  def M300_QI : VFPR<44, "M300"> {
    let Aliases = [ M300_Q ];
    let SubRegs = [ C300_Q, C310_Q, C320_Q, C330_Q ];
  }
  def M400_Q : VFPR<16, "M400"> {
    let SubRegs = [ C400_Q, C410_Q, C420_Q, C430_Q ];
  }
  def M400_QI : VFPR<48, "M400"> {
    let Aliases = [ M400_Q ];
    let SubRegs = [ C400_Q, C410_Q, C420_Q, C430_Q ];
  }
  def M500_Q : VFPR<20, "M500"> {
    let SubRegs = [ C500_Q, C510_Q, C520_Q, C530_Q ];
  }
  def M500_QI : VFPR<52, "M500"> {
    let Aliases = [ M500_Q ];
    let SubRegs = [ C500_Q, C510_Q, C520_Q, C530_Q ];
  }
  def M600_Q : VFPR<24, "M600"> {
    let SubRegs = [ C600_Q, C610_Q, C620_Q, C630_Q ];
  }
  def M600_QI : VFPR<56, "M600"> {
    let Aliases = [ M600_Q ];
    let SubRegs = [ C600_Q, C610_Q, C620_Q, C630_Q ];
  }
  def M700_Q : VFPR<28, "M700"> {
    let SubRegs = [ C700_Q, C710_Q, C720_Q, C730_Q ];
  }
  def M700_QI : VFPR<60, "M700"> {
    let Aliases = [ M700_Q ];
    let SubRegs = [ C700_Q, C710_Q, C720_Q, C730_Q ];
  }
  def E000_Q : VFPR<32, "E000"> {
    let SubRegs = [ C000_Q, C010_Q, C020_Q, C030_Q ];
  }
  def E000_QI : VFPR<0, "E000"> {
    let Aliases = [ E000_Q ];
    let SubRegs = [ C000_Q, C010_Q, C020_Q, C030_Q ];
  }
  def E100_Q : VFPR<36, "E100"> {
    let SubRegs = [ C100_Q, C110_Q, C120_Q, C130_Q ];
  }
  def E100_QI : VFPR<4, "E100"> {
    let Aliases = [ E100_Q ];
    let SubRegs = [ C100_Q, C110_Q, C120_Q, C130_Q ];
  }
  def E200_Q : VFPR<40, "E200"> {
    let SubRegs = [ C200_Q, C210_Q, C220_Q, C230_Q ];
  }
  def E200_QI : VFPR<8, "E200"> {
    let Aliases = [ E200_Q ];
    let SubRegs = [ C200_Q, C210_Q, C220_Q, C230_Q ];
  }
  def E300_Q : VFPR<44, "E300"> {
    let SubRegs = [ C300_Q, C310_Q, C320_Q, C330_Q ];
  }
  def E300_QI : VFPR<12, "E300"> {
    let Aliases = [ E300_Q ];
    let SubRegs = [ C300_Q, C310_Q, C320_Q, C330_Q ];
  }
  def E400_Q : VFPR<48, "E400"> {
    let SubRegs = [ C400_Q, C410_Q, C420_Q, C430_Q ];
  }
  def E400_QI : VFPR<16, "E400"> {
    let Aliases = [ E400_Q ];
    let SubRegs = [ C400_Q, C410_Q, C420_Q, C430_Q ];
  }
  def E500_Q : VFPR<52, "E500"> {
    let SubRegs = [ C500_Q, C510_Q, C520_Q, C530_Q ];
  }
  def E500_QI : VFPR<20, "E500"> {
    let Aliases = [ E500_Q ];
    let SubRegs = [ C500_Q, C510_Q, C520_Q, C530_Q ];
  }
  def E600_Q : VFPR<56, "E600"> {
    let SubRegs = [ C600_Q, C610_Q, C620_Q, C630_Q ];
  }
  def E600_QI : VFPR<24, "E600"> {
    let Aliases = [ E600_Q ];
    let SubRegs = [ C600_Q, C610_Q, C620_Q, C630_Q ];
  }
  def E700_Q : VFPR<60, "E700"> {
    let SubRegs = [ C700_Q, C710_Q, C720_Q, C730_Q ];
  }
  def E700_QI : VFPR<28, "E700"> {
    let Aliases = [ E700_Q ];
    let SubRegs = [ C700_Q, C710_Q, C720_Q, C730_Q ];
  }
}
}

// Allegrex VFPU registers
def VFPUS : RegisterClass<"Mips", [f32], 64, (add
  S000, S010, S020, S030, S100, S110, S120, S130,
  S200, S210, S220, S230, S300, S310, S320, S330,
  S400, S410, S420, S430, S500, S510, S520, S530,
  S600, S610, S620, S630, S700, S710, S720, S730,
  S001, S011, S021, S031, S101, S111, S121, S131,
  S201, S211, S221, S231, S301, S311, S321, S331,
  S401, S411, S421, S431, S501, S511, S521, S531,
  S601, S611, S621, S631, S701, S711, S721, S731,
  S002, S012, S022, S032, S102, S112, S122, S132,
  S202, S212, S222, S232, S302, S312, S322, S332,
  S402, S412, S422, S432, S502, S512, S522, S532,
  S602, S612, S622, S632, S702, S712, S722, S732,
  S003, S013, S023, S033, S103, S113, S123, S133,
  S203, S213, S223, S233, S303, S313, S323, S333,
  S403, S413, S423, S433, S503, S513, S523, S533,
  S603, S613, S623, S633, S703, S713, S723, S733)>;

def VFPUP : RegisterClass<"Mips", [v2f32], 64, (add
  C000_P, C010_P, C020_P, C030_P, C100_P, C110_P, C120_P, C130_P,
  C200_P, C210_P, C220_P, C230_P, C300_P, C310_P, C320_P, C330_P,
  C400_P, C410_P, C420_P, C430_P, C500_P, C510_P, C520_P, C530_P,
  C600_P, C610_P, C620_P, C630_P, C700_P, C710_P, C720_P, C730_P,
  R000_P, R001_P, R002_P, R003_P, R100_P, R101_P, R102_P, R103_P,
  R200_P, R201_P, R202_P, R203_P, R300_P, R301_P, R302_P, R303_P,
  R400_P, R401_P, R402_P, R403_P, R500_P, R501_P, R502_P, R503_P,
  R600_P, R601_P, R602_P, R603_P, R700_P, R701_P, R702_P, R703_P,
  C002_P, C012_P, C022_P, C032_P, C102_P, C112_P, C122_P, C132_P,
  C202_P, C212_P, C222_P, C232_P, C302_P, C312_P, C322_P, C332_P,
  C402_P, C412_P, C422_P, C432_P, C502_P, C512_P, C522_P, C532_P,
  C602_P, C612_P, C622_P, C632_P, C702_P, C712_P, C722_P, C732_P,
  R020_P, R021_P, R022_P, R023_P, R120_P, R121_P, R122_P, R123_P,
  R220_P, R221_P, R222_P, R223_P, R320_P, R321_P, R322_P, R323_P,
  R420_P, R421_P, R422_P, R423_P, R520_P, R521_P, R522_P, R523_P,
  R620_P, R621_P, R622_P, R623_P, R720_P, R721_P, R722_P, R723_P)>;

def VFPUT : RegisterClass<"Mips", [v3f32], 64, (add
  C000_T, C010_T, C020_T, C030_T, C100_T, C110_T, C120_T, C130_T,
  C200_T, C210_T, C220_T, C230_T, C300_T, C310_T, C320_T, C330_T,
  C400_T, C410_T, C420_T, C430_T, C500_T, C510_T, C520_T, C530_T,
  C600_T, C610_T, C620_T, C630_T, C700_T, C710_T, C720_T, C730_T,
  R000_T, R001_T, R002_T, R003_T, R100_T, R101_T, R102_T, R103_T,
  R200_T, R201_T, R202_T, R203_T, R300_T, R301_T, R302_T, R303_T,
  R400_T, R401_T, R402_T, R403_T, R500_T, R501_T, R502_T, R503_T,
  R600_T, R601_T, R602_T, R603_T, R700_T, R701_T, R702_T, R703_T,
  C001_T, C011_T, C021_T, C031_T, C101_T, C111_T, C121_T, C131_T,
  C201_T, C211_T, C221_T, C231_T, C301_T, C311_T, C321_T, C331_T,
  C401_T, C411_T, C421_T, C431_T, C501_T, C511_T, C521_T, C531_T,
  C601_T, C611_T, C621_T, C631_T, C701_T, C711_T, C721_T, C731_T,
  R010_T, R011_T, R012_T, R013_T, R110_T, R111_T, R112_T, R113_T,
  R210_T, R211_T, R212_T, R213_T, R310_T, R311_T, R312_T, R313_T,
  R410_T, R411_T, R412_T, R413_T, R510_T, R511_T, R512_T, R513_T,
  R610_T, R611_T, R612_T, R613_T, R710_T, R711_T, R712_T, R713_T)>;

def VFPUQ : RegisterClass<"Mips", [v4f32], 64, (add
  C000_Q, C010_Q, C020_Q, C030_Q, C100_Q, C110_Q, C120_Q, C130_Q,
  C200_Q, C210_Q, C220_Q, C230_Q, C300_Q, C310_Q, C320_Q, C330_Q,
  C400_Q, C410_Q, C420_Q, C430_Q, C500_Q, C510_Q, C520_Q, C530_Q,
  C600_Q, C610_Q, C620_Q, C630_Q, C700_Q, C710_Q, C720_Q, C730_Q,
  R000_Q, R001_Q, R002_Q, R003_Q, R100_Q, R101_Q, R102_Q, R103_Q,
  R200_Q, R201_Q, R202_Q, R203_Q, R300_Q, R301_Q, R302_Q, R303_Q,
  R400_Q, R401_Q, R402_Q, R403_Q, R500_Q, R501_Q, R502_Q, R503_Q,
  R600_Q, R601_Q, R602_Q, R603_Q, R700_Q, R701_Q, R702_Q, R703_Q)>;

def VFPUM4 : RegisterClass<"Mips", [v16f32], 64, (add
  M000_Q, M100_Q, M200_Q, M300_Q,
  M400_Q, M500_Q, M600_Q, M700_Q,
  E000_Q, E100_Q, E200_Q, E300_Q,
  E400_Q, E500_Q, E600_Q, E700_Q)>;

def VFPUM4I : RegisterClass<"Mips", [v16f32], 64, (add
  M000_QI, M100_QI, M200_QI, M300_QI,
  M400_QI, M500_QI, M600_QI, M700_QI,
  E000_QI, E100_QI, E200_QI, E300_QI,
  E400_QI, E500_QI, E600_QI, E700_QI)>;

def VFPUM3 : RegisterClass<"Mips", [v9f32], 64, (add
  M000_T, M010_T, M100_T, M110_T, M200_T, M210_T, M300_T, M310_T,
  M400_T, M410_T, M500_T, M510_T, M600_T, M610_T, M700_T, M710_T,
  E000_T, E001_T, E100_T, E101_T, E200_T, E201_T, E300_T, E301_T,
  E400_T, E401_T, E500_T, E501_T, E600_T, E601_T, E700_T, E701_T,
  M001_T, M011_T, M101_T, M111_T, M201_T, M211_T, M301_T, M311_T,
  M401_T, M411_T, M501_T, M511_T, M601_T, M611_T, M701_T, M711_T,
  E010_T, E011_T, E110_T, E111_T, E210_T, E211_T, E310_T, E311_T,
  E410_T, E411_T, E510_T, E511_T, E610_T, E611_T, E710_T, E711_T)>;

def VFPUM3I : RegisterClass<"Mips", [v9f32], 64, (add
  M000_TI, M010_TI, M100_TI, M110_TI, M200_TI, M210_TI, M300_TI, M310_TI,
  M400_TI, M410_TI, M500_TI, M510_TI, M600_TI, M610_TI, M700_TI, M710_TI,
  E000_TI, E001_TI, E100_TI, E101_TI, E200_TI, E201_TI, E300_TI, E301_TI,
  E400_TI, E401_TI, E500_TI, E501_TI, E600_TI, E601_TI, E700_TI, E701_TI,
  M001_TI, M011_TI, M101_TI, M111_TI, M201_TI, M211_TI, M301_TI, M311_TI,
  M401_TI, M411_TI, M501_TI, M511_TI, M601_TI, M611_TI, M701_TI, M711_TI,
  E010_TI, E011_TI, E110_TI, E111_TI, E210_TI, E211_TI, E310_TI, E311_TI,
  E410_TI, E411_TI, E510_TI, E511_TI, E610_TI, E611_TI, E710_TI, E711_TI)>;

def VFPUM2 : RegisterClass<"Mips", [v4f32], 64, (add
  M000_P, M020_P, M100_P, M120_P, M200_P, M220_P, M300_P, M320_P,
  M400_P, M420_P, M500_P, M520_P, M600_P, M620_P, M700_P, M720_P,
  E000_P, E002_P, E100_P, E102_P, E200_P, E202_P, E300_P, E302_P,
  E400_P, E402_P, E500_P, E502_P, E600_P, E602_P, E700_P, E702_P,
  M002_P, M022_P, M102_P, M122_P, M202_P, M222_P, M302_P, M322_P,
  M402_P, M422_P, M502_P, M522_P, M602_P, M622_P, M702_P, M722_P,
  E020_P, E022_P, E120_P, E122_P, E220_P, E222_P, E320_P, E322_P,
  E420_P, E422_P, E520_P, E522_P, E620_P, E622_P, E720_P, E722_P)>;

def VFPUM2I : RegisterClass<"Mips", [v4f32], 64, (add
  M000_PI, M020_PI, M100_PI, M120_PI, M200_PI, M220_PI, M300_PI, M320_PI,
  M400_PI, M420_PI, M500_PI, M520_PI, M600_PI, M620_PI, M700_PI, M720_PI,
  E000_PI, E002_PI, E100_PI, E102_PI, E200_PI, E202_PI, E300_PI, E302_PI,
  E400_PI, E402_PI, E500_PI, E502_PI, E600_PI, E602_PI, E700_PI, E702_PI,
  M002_PI, M022_PI, M102_PI, M122_PI, M202_PI, M222_PI, M302_PI, M322_PI,
  M402_PI, M422_PI, M502_PI, M522_PI, M602_PI, M622_PI, M702_PI, M722_PI,
  E020_PI, E022_PI, E120_PI, E122_PI, E220_PI, E222_PI, E320_PI, E322_PI,
  E420_PI, E422_PI, E520_PI, E522_PI, E620_PI, E622_PI, E720_PI, E722_PI)>;

class VFPURegOperand : AsmOperandClass {
  let PredicateMethod = "isVFPUReg";
}

def VFPUSAsmOperand : VFPURegOperand {
  let Name = "VFPUSReg";
  let ParserMethod = "parseVFPUSRegister";
}

def VFPUPAsmOperand : VFPURegOperand {
  let Name = "VFPUPReg";
  let ParserMethod = "parseVFPUPRegister";
}

def VFPUTAsmOperand : VFPURegOperand {
  let Name = "VFPUTReg";
  let ParserMethod = "parseVFPUTRegister";
}

def VFPUQAsmOperand : VFPURegOperand {
  let Name = "VFPUQReg";
  let ParserMethod = "parseVFPUQRegister";
}

def VFPUM4AsmOperand : VFPURegOperand {
  let Name = "VFPUM4Reg";
  let ParserMethod = "parseVFPUM4Register";
}

def VFPUM4IAsmOperand : VFPURegOperand {
  let Name = "VFPUM4IReg";
  let ParserMethod = "parseVFPUM4Register";
}

def VFPUM3AsmOperand : VFPURegOperand {
  let Name = "VFPUM3Reg";
  let ParserMethod = "parseVFPUM3Register";
}

def VFPUM3IAsmOperand : VFPURegOperand {
  let Name = "VFPUM3IReg";
  let ParserMethod = "parseVFPUM3Register";
}

def VFPUM2AsmOperand : VFPURegOperand {
  let Name = "VFPUM2Reg";
  let ParserMethod = "parseVFPUM2Register";
}

def VFPUM2IAsmOperand : VFPURegOperand {
  let Name = "VFPUM2IReg";
  let ParserMethod = "parseVFPUM2Register";
}

def VFPUSOpnd : RegisterOperand<VFPUS> {
  let ParserMatchClass = VFPUSAsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUPOpnd : RegisterOperand<VFPUP> {
  let ParserMatchClass = VFPUPAsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUTOpnd : RegisterOperand<VFPUT> {
  let ParserMatchClass = VFPUTAsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUQOpnd : RegisterOperand<VFPUQ> {
  let ParserMatchClass = VFPUQAsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUM4Opnd : RegisterOperand<VFPUM4> {
  let ParserMatchClass = VFPUM4AsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUM4IOpnd : RegisterOperand<VFPUM4I> {
  let ParserMatchClass = VFPUM4IAsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUM3Opnd : RegisterOperand<VFPUM3> {
  let ParserMatchClass = VFPUM3AsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUM3IOpnd : RegisterOperand<VFPUM3I> {
  let ParserMatchClass = VFPUM3IAsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUM2Opnd : RegisterOperand<VFPUM2> {
  let ParserMatchClass = VFPUM2AsmOperand;
  let PrintMethod = "printVFPUOperand";
}

def VFPUM2IOpnd : RegisterOperand<VFPUM2I> {
  let ParserMatchClass = VFPUM2IAsmOperand;
  let PrintMethod = "printVFPUOperand";
}